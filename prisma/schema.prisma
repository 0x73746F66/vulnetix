// PRAGMA table_info(TABLE_NAME)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model audit {
  id             Int     @id @default(autoincrement())
  memberEmail    String  @unique
  member         members @relation(fields: [memberEmail], references: [email])
  action         String
  actionTime     Int
  additionalData String?
}

model sessions {
  kid         String  @unique
  memberEmail String
  member      members @relation(fields: [memberEmail], references: [email])
  expiry      Int
  issued      Int
  secret      String?
  authn_ip    String?
  authn_ua    String?
}

model members {
  email         String        @id @unique
  orgName       String
  passwordHash  String
  firstName     String?
  lastName      String?
  phoneNumber   String?
  alertNews     Int           @default(0)
  alertOverdue  Int           @default(0)
  alertFindings Int           @default(0)
  alertType     Int           @default(0)
  sarif         sarif[]
  github_apps   github_apps[]
  git_repos     git_repos[]
  member_keys   member_keys[]
  sessions      sessions[]
  audit         audit?
}

model member_keys {
  id          Int     @id @default(autoincrement())
  memberEmail String
  keyType     String
  member      members @relation(fields: [memberEmail], references: [email])
  secret      String
  suspend     Int     @default(0)
}

model github_apps {
  installationId String  @unique
  memberEmail    String
  member         members @relation(fields: [memberEmail], references: [email])
  accessToken    String
  created        Int
  expires        Int?
}

model git_repos {
  pk            String  @unique
  fullName      String  @id
  createdAt     Int
  updatedAt     Int
  pushedAt      Int
  defaultBranch String
  ownerId       Int
  memberEmail   String
  member        members @relation(fields: [memberEmail], references: [email])
  licenseSpdxId String?
  licenseName   String?
  fork          Int     @default(0)
  template      Int     @default(0)
  archived      Int     @default(0)
  visibility    String
  avatarUrl     String?
  sarif         sarif[]
}

model sarif {
  sarifId      String          @unique
  reportId     String          @id
  fullName     String?
  repo         git_repos?      @relation(fields: [fullName], references: [fullName])
  source       String
  memberEmail  String
  member       members         @relation(fields: [memberEmail], references: [email])
  commitSha    String?
  ref          String?
  createdAt    Int
  resultsCount Int
  rulesCount   Int
  toolName     String?
  toolVersion  String?
  analysisKey  String?
  warning      String?
  results      sarif_results[]
}

model sarif_results {
  guid                String  @unique
  reportId            String
  sarif               sarif   @relation(fields: [reportId], references: [reportId])
  messageText         String
  ruleId              String
  locations           String?
  automationDetailsId String?
  rulesetName         String?
  level               String?
  description         String?
  helpMarkdown        String?
  securitySeverity    String?
  precision           String?
  tags                String?
}
