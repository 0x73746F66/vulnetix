// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model sessions {
  kid         String  @unique
  memberEmail String
  member      members @relation(fields: [memberEmail], references: [email])
  expiry      Int
  issued      Int
  secret      String?
  authn_ip    String?
  authn_ua    String?
}

model members {
  email                 String                  @id @unique
  orgName               String?
  passwordHash          String
  avatarUrl             String?
  firstName             String?
  lastName              String?
  alertNews             Int                     @default(0)
  alertOverdue          Int                     @default(0)
  alertFindings         Int                     @default(0)
  alertType             Int                     @default(0)
  sarif                 sarif[]
  github_apps           github_apps[]
  git_repos             git_repos[]
  member_keys           member_keys[]
  sessions              sessions[]
  spdx                  spdx[]
  integration_usage_log integration_usage_log[]
  findings              findings[]
  triage_activity       triage_activity[]
}

model member_keys {
  id          Int         @id @default(autoincrement())
  memberEmail String
  keyLabel    String?
  keyType     String
  member      members     @relation(fields: [memberEmail], references: [email])
  secret      String
  suspend     Int         @default(0)
  githubPat   github_pat?

  @@unique([memberEmail, secret])
}

model github_pat {
  keyId     Int         @unique
  memberKey member_keys @relation(fields: [keyId], references: [id])
  login     String
  expires   Int
  created   Int
  avatarUrl String?
}

model github_apps {
  installationId Int     @unique
  memberEmail    String
  member         members @relation(fields: [memberEmail], references: [email])
  accessToken    String
  login          String?
  created        Int
  expires        Int?
  avatarUrl      String?
}

model git_repos {
  fullName      String  @id
  ghid          Int?
  source        String
  createdAt     Int
  updatedAt     Int
  pushedAt      Int
  defaultBranch String
  ownerId       Int
  memberEmail   String
  member        members @relation(fields: [memberEmail], references: [email])
  licenseSpdxId String?
  licenseName   String?
  fork          Int     @default(0)
  template      Int     @default(0)
  archived      Int     @default(0)
  visibility    String
  avatarUrl     String?
  sarif         sarif[]
  spdx          spdx[]

  @@unique([fullName, memberEmail])
}

model sarif {
  sarifId      String          @unique
  reportId     String          @id
  fullName     String?
  repo         git_repos?      @relation(fields: [fullName], references: [fullName])
  source       String
  memberEmail  String
  member       members         @relation(fields: [memberEmail], references: [email])
  commitSha    String?
  ref          String?
  createdAt    Int
  resultsCount Int
  rulesCount   Int
  toolName     String?
  toolVersion  String?
  analysisKey  String?
  warning      String?
  results      sarif_results[]
}

model sarif_results {
  guid                String  @unique
  reportId            String
  sarif               sarif   @relation(fields: [reportId], references: [reportId])
  messageText         String
  ruleId              String
  locations           String?
  automationDetailsId String?
  rulesetName         String?
  level               String?
  description         String?
  helpMarkdown        String?
  securitySeverity    String?
  precision           String?
  tags                String?
}

model spdx {
  spdxId            String     @unique
  source            String
  memberEmail       String
  member            members    @relation(fields: [memberEmail], references: [email])
  repoName          String?
  repo              git_repos? @relation(fields: [repoName], references: [fullName])
  spdxVersion       String
  dataLicense       String?
  name              String?
  documentNamespace String?
  createdAt         Int
  toolName          String?
  documentDescribes String?
  packagesJSON      String?
  relationshipsJSON String?
  comment           String?
  findings          findings[]
}

model integration_usage_log {
  id          Int     @id @default(autoincrement())
  memberEmail String
  source      String
  member      members @relation(fields: [memberEmail], references: [email])
  request     String
  response    String?
  statusCode  Int
  createdAt   Int
}

model findings {
  findingId                  String            @unique
  memberEmail                String
  member                     members           @relation(fields: [memberEmail], references: [email])
  source                     String
  category                   String
  createdAt                  Int
  modifiedAt                 Int
  publishedAt                Int?
  detectionTitle             String
  purl                       String?
  cpe                        String?
  databaseReviewed           Int?
  cve                        String?
  aliases                    String?
  cwes                       String?
  packageName                String
  packageVersion             String?
  packageLicense             String?
  vendor                     String?
  product                    String?
  packageEcosystem           String?
  sourceCodeUrl              String?
  exploitsJSON               String?
  knownExploitsJSON          String?
  cisaDateAdded              Int?
  knownRansomwareCampaignUse String?
  fixVersion                 String?
  fixAutomatable             Int?
  vulnerableVersionRange     String?
  maliciousSource            String?
  abandoned                  Int?
  squattedPackage            String?
  referencesJSON             String?
  spdxId                     String?
  spdx                       spdx?             @relation(fields: [spdxId], references: [spdxId])
  cdxId                      String?
  // cdx             cdx?    @relation(fields: [cdxId], references: [cdxId])
  triage                     triage_activity[]
}

model triage_activity {
  findingId             String   @id
  finding               findings @relation(fields: [findingId], references: [findingId])
  createdAt             Int
  lastObserved          Int
  seen                  Int
  seenAt                Int?
  cvssVector            String?
  cvssScore             String?
  epssPercentile        String?
  epssScore             String?
  ssvc                  String?
  remediation           String?
  analysisState         String
  analysisJustification String?
  analysisResponse      String?
  analysisDetail        String?
  triageAutomated       Int      @default(0)
  memberEmail           String?
  member                members? @relation(fields: [memberEmail], references: [email])

  @@unique([findingId, analysisState])
}
