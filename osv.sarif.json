{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://github.com/google/osv-scanner",
          "name": "osv-scanner",
          "rules": [
            {
              "id": "CVE-2024-37890",
              "name": "CVE-2024-37890",
              "shortDescription": {
                "text": "CVE-2024-37890: ws affected by a DoS when handling a request with many HTTP headers"
              },
              "fullDescription": {
                "text": "### Impact\n\nA request with a number of headers exceeding the[`server.maxHeadersCount`][] threshold could be used to crash a ws server.\n\n### Proof of concept\n\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 0 }, function () {\n  const chars = \"!#$%&'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~\".split('');\n  const headers = {};\n  let count = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    if (count === 2000) break;\n\n    for (let j = 0; j < chars.length; j++) {\n      const key = chars[i] + chars[j];\n      headers[key] = 'x';\n\n      if (++count === 2000) break;\n    }\n  }\n\n  headers.Connection = 'Upgrade';\n  headers.Upgrade = 'websocket';\n  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';\n  headers['Sec-WebSocket-Version'] = '13';\n\n  const request = http.request({\n    headers: headers,\n    host: '127.0.0.1',\n    port: wss.address().port\n  });\n\n  request.end();\n});\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@8.17.1 (https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e)\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated in the following ways:\n\n1. Reduce the maximum allowed length of the request headers using the [`--max-http-header-size=size`][] and/or the [`maxHeaderSize`][] options so that no more headers than the `server.maxHeadersCount` limit can be sent.\n2. Set `server.maxHeadersCount` to `0` so that no limit is applied.\n\n### Credits\n\nThe vulnerability was reported by [Ryan LaPointe](https://github.com/rrlapointe) in https://github.com/websockets/ws/issues/2230.\n\n### References\n\n- https://github.com/websockets/ws/issues/2230\n- https://github.com/websockets/ws/pull/2231\n\n[`--max-http-header-size=size`]: https://nodejs.org/api/cli.html#--max-http-header-sizesize\n[`maxHeaderSize`]: https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener\n[`server.maxHeadersCount`]: https://nodejs.org/api/http.html#servermaxheaderscount\n",
                "markdown": "### Impact\n\nA request with a number of headers exceeding the[`server.maxHeadersCount`][] threshold could be used to crash a ws server.\n\n### Proof of concept\n\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 0 }, function () {\n  const chars = \"!#$%&'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~\".split('');\n  const headers = {};\n  let count = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    if (count === 2000) break;\n\n    for (let j = 0; j < chars.length; j++) {\n      const key = chars[i] + chars[j];\n      headers[key] = 'x';\n\n      if (++count === 2000) break;\n    }\n  }\n\n  headers.Connection = 'Upgrade';\n  headers.Upgrade = 'websocket';\n  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';\n  headers['Sec-WebSocket-Version'] = '13';\n\n  const request = http.request({\n    headers: headers,\n    host: '127.0.0.1',\n    port: wss.address().port\n  });\n\n  request.end();\n});\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@8.17.1 (https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e)\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated in the following ways:\n\n1. Reduce the maximum allowed length of the request headers using the [`--max-http-header-size=size`][] and/or the [`maxHeaderSize`][] options so that no more headers than the `server.maxHeadersCount` limit can be sent.\n2. Set `server.maxHeadersCount` to `0` so that no limit is applied.\n\n### Credits\n\nThe vulnerability was reported by [Ryan LaPointe](https://github.com/rrlapointe) in https://github.com/websockets/ws/issues/2230.\n\n### References\n\n- https://github.com/websockets/ws/issues/2230\n- https://github.com/websockets/ws/pull/2231\n\n[`--max-http-header-size=size`]: https://nodejs.org/api/cli.html#--max-http-header-sizesize\n[`maxHeaderSize`]: https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener\n[`server.maxHeadersCount`]: https://nodejs.org/api/http.html#servermaxheaderscount\n"
              },
              "deprecatedIds": [
                "CVE-2024-37890",
                "GHSA-3h5v-q93c-6h6q"
              ],
              "help": {
                "text": "**Your dependency is vulnerable to [CVE-2024-37890](https://osv.dev/list?q=CVE-2024-37890)**.\n\n## [GHSA-3h5v-q93c-6h6q](https://osv.dev/vulnerability/GHSA-3h5v-q93c-6h6q)\n\n<details>\n<summary>Details</summary>\n\n> ### Impact\n> \n> A request with a number of headers exceeding the[`server.maxHeadersCount`][] threshold could be used to crash a ws server.\n> \n> ### Proof of concept\n> \n> ```js\n> const http = require('http');\n> const WebSocket = require('ws');\n> \n> const wss = new WebSocket.Server({ port: 0 }, function () {\n>   const chars = \"!#$%&'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~\".split('');\n>   const headers = {};\n>   let count = 0;\n> \n>   for (let i = 0; i < chars.length; i++) {\n>     if (count === 2000) break;\n> \n>     for (let j = 0; j < chars.length; j++) {\n>       const key = chars[i] + chars[j];\n>       headers[key] = 'x';\n> \n>       if (++count === 2000) break;\n>     }\n>   }\n> \n>   headers.Connection = 'Upgrade';\n>   headers.Upgrade = 'websocket';\n>   headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';\n>   headers['Sec-WebSocket-Version'] = '13';\n> \n>   const request = http.request({\n>     headers: headers,\n>     host: '127.0.0.1',\n>     port: wss.address().port\n>   });\n> \n>   request.end();\n> });\n> ```\n> \n> ### Patches\n> \n> The vulnerability was fixed in ws@8.17.1 (https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e)\n> \n> ### Workarounds\n> \n> In vulnerable versions of ws, the issue can be mitigated in the following ways:\n> \n> 1. Reduce the maximum allowed length of the request headers using the [`--max-http-header-size=size`][] and/or the [`maxHeaderSize`][] options so that no more headers than the `server.maxHeadersCount` limit can be sent.\n> 2. Set `server.maxHeadersCount` to `0` so that no limit is applied.\n> \n> ### Credits\n> \n> The vulnerability was reported by [Ryan LaPointe](https://github.com/rrlapointe) in https://github.com/websockets/ws/issues/2230.\n> \n> ### References\n> \n> - https://github.com/websockets/ws/issues/2230\n> - https://github.com/websockets/ws/pull/2231\n> \n> [`--max-http-header-size=size`]: https://nodejs.org/api/cli.html#--max-http-header-sizesize\n> [`maxHeaderSize`]: https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener\n> [`server.maxHeadersCount`]: https://nodejs.org/api/http.html#servermaxheaderscount\n> \n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/home/chris/repos/vulnetix/package-lock.json | ws | 8.17.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-3h5v-q93c-6h6q | ws | 5.2.4, 6.2.3, 7.5.10, 8.17.1 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/home/chris/repos/vulnetix/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-37890\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                "markdown": "**Your dependency is vulnerable to [CVE-2024-37890](https://osv.dev/list?q=CVE-2024-37890)**.\n\n## [GHSA-3h5v-q93c-6h6q](https://osv.dev/vulnerability/GHSA-3h5v-q93c-6h6q)\n\n<details>\n<summary>Details</summary>\n\n> ### Impact\n> \n> A request with a number of headers exceeding the[`server.maxHeadersCount`][] threshold could be used to crash a ws server.\n> \n> ### Proof of concept\n> \n> ```js\n> const http = require('http');\n> const WebSocket = require('ws');\n> \n> const wss = new WebSocket.Server({ port: 0 }, function () {\n>   const chars = \"!#$%&'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~\".split('');\n>   const headers = {};\n>   let count = 0;\n> \n>   for (let i = 0; i < chars.length; i++) {\n>     if (count === 2000) break;\n> \n>     for (let j = 0; j < chars.length; j++) {\n>       const key = chars[i] + chars[j];\n>       headers[key] = 'x';\n> \n>       if (++count === 2000) break;\n>     }\n>   }\n> \n>   headers.Connection = 'Upgrade';\n>   headers.Upgrade = 'websocket';\n>   headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';\n>   headers['Sec-WebSocket-Version'] = '13';\n> \n>   const request = http.request({\n>     headers: headers,\n>     host: '127.0.0.1',\n>     port: wss.address().port\n>   });\n> \n>   request.end();\n> });\n> ```\n> \n> ### Patches\n> \n> The vulnerability was fixed in ws@8.17.1 (https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e)\n> \n> ### Workarounds\n> \n> In vulnerable versions of ws, the issue can be mitigated in the following ways:\n> \n> 1. Reduce the maximum allowed length of the request headers using the [`--max-http-header-size=size`][] and/or the [`maxHeaderSize`][] options so that no more headers than the `server.maxHeadersCount` limit can be sent.\n> 2. Set `server.maxHeadersCount` to `0` so that no limit is applied.\n> \n> ### Credits\n> \n> The vulnerability was reported by [Ryan LaPointe](https://github.com/rrlapointe) in https://github.com/websockets/ws/issues/2230.\n> \n> ### References\n> \n> - https://github.com/websockets/ws/issues/2230\n> - https://github.com/websockets/ws/pull/2231\n> \n> [`--max-http-header-size=size`]: https://nodejs.org/api/cli.html#--max-http-header-sizesize\n> [`maxHeaderSize`]: https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener\n> [`server.maxHeadersCount`]: https://nodejs.org/api/http.html#servermaxheaderscount\n> \n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| lockfile:/home/chris/repos/vulnetix/package-lock.json | ws | 8.17.0 |\n\n## Remediation\n\nTo fix these vulnerabilities, update the vulnerabilities past the listed fixed versions below.\n\n### Fixed Versions\n\n| Vulnerability ID | Package Name | Fixed Version |\n| --- | --- | --- |\n| GHSA-3h5v-q93c-6h6q | ws | 5.2.4, 6.2.3, 7.5.10, 8.17.1 |\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/home/chris/repos/vulnetix/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-37890\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
              }
            },
            {
              "id": "CVE-2024-39338",
              "name": "CVE-2024-39338",
              "shortDescription": {
                "text": "CVE-2024-39338: Server-Side Request Forgery in axios"
              },
              "fullDescription": {
                "text": "axios 1.7.2 allows SSRF via unexpected behavior where requests for path relative URLs get processed as protocol relative URLs.",
                "markdown": "axios 1.7.2 allows SSRF via unexpected behavior where requests for path relative URLs get processed as protocol relative URLs."
              },
              "deprecatedIds": [
                "CVE-2024-39338",
                "GHSA-8hc4-vh64-cxmj"
              ],
              "help": {
                "text": "**Your dependency is vulnerable to [CVE-2024-39338](https://osv.dev/list?q=CVE-2024-39338)**.\n\n## [GHSA-8hc4-vh64-cxmj](https://osv.dev/vulnerability/GHSA-8hc4-vh64-cxmj)\n\n<details>\n<summary>Details</summary>\n\n> axios 1.7.2 allows SSRF via unexpected behavior where requests for path relative URLs get processed as protocol relative URLs.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| sbom:/home/chris/repos/vulnetix/npm.cdx.json | axios | 1.7.2 |\n| sbom:/home/chris/repos/vulnetix/npm.spdx.json | axios | 1.7.2 |\n| lockfile:/home/chris/repos/vulnetix/package-lock.json | axios | 1.7.2 |\n\n## Remediation\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/home/chris/repos/vulnetix/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-39338\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n",
                "markdown": "**Your dependency is vulnerable to [CVE-2024-39338](https://osv.dev/list?q=CVE-2024-39338)**.\n\n## [GHSA-8hc4-vh64-cxmj](https://osv.dev/vulnerability/GHSA-8hc4-vh64-cxmj)\n\n<details>\n<summary>Details</summary>\n\n> axios 1.7.2 allows SSRF via unexpected behavior where requests for path relative URLs get processed as protocol relative URLs.\n\n</details>\n\n---\n\n### Affected Packages\n\n| Source | Package Name | Package Version |\n| --- | --- | --- |\n| sbom:/home/chris/repos/vulnetix/npm.cdx.json | axios | 1.7.2 |\n| sbom:/home/chris/repos/vulnetix/npm.spdx.json | axios | 1.7.2 |\n| lockfile:/home/chris/repos/vulnetix/package-lock.json | axios | 1.7.2 |\n\n## Remediation\n\nIf you believe these vulnerabilities do not affect your code and wish to ignore them, add them to the ignore list in an\n`osv-scanner.toml` file located in the same directory as the lockfile containing the vulnerable dependency.\n\nSee the format and more options in our documentation here: https://google.github.io/osv-scanner/configuration/\n\nAdd or append these values to the following config files to ignore this vulnerability:\n\n`/home/chris/repos/vulnetix/osv-scanner.toml`\n\n```\n[[IgnoredVulns]]\nid = \"CVE-2024-39338\"\nreason = \"Your reason for ignoring this vulnerability\"\n```\n"
              }
            }
          ],
          "version": "1.8.2"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "file:///home/chris/repos/vulnetix/package-lock.json"
          },
          "length": -1
        },
        {
          "location": {
            "uri": "file:///home/chris/repos/vulnetix/npm.cdx.json"
          },
          "length": -1
        },
        {
          "location": {
            "uri": "file:///home/chris/repos/vulnetix/npm.spdx.json"
          },
          "length": -1
        }
      ],
      "results": [
        {
          "ruleId": "CVE-2024-37890",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Package 'ws@8.17.0' is vulnerable to 'CVE-2024-37890' (also known as 'GHSA-3h5v-q93c-6h6q')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/chris/repos/vulnetix/package-lock.json"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-39338",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Package 'axios@1.7.2' is vulnerable to 'CVE-2024-39338' (also known as 'GHSA-8hc4-vh64-cxmj')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/chris/repos/vulnetix/npm.cdx.json"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-39338",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Package 'axios@1.7.2' is vulnerable to 'CVE-2024-39338' (also known as 'GHSA-8hc4-vh64-cxmj')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/chris/repos/vulnetix/npm.spdx.json"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-39338",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Package 'axios@1.7.2' is vulnerable to 'CVE-2024-39338' (also known as 'GHSA-8hc4-vh64-cxmj')."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/chris/repos/vulnetix/package-lock.json"
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
